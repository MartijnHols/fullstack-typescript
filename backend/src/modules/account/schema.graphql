# Run `yarn codegen` in the project root when making changes to this file to update schema.generated.ts in both front- and backend.

scalar DateTime
scalar SessionID
type Account {
  id: ID!
  email: String!
  verified: Boolean!
  createdAt: DateTime!
  lastSeenAt: DateTime!
  canLogin: Boolean!
}

enum LoginError {
  INVALID_USERNAME
  ACCOUNT_UNAVAILABLE
  INVALID_PASSWORD
}
type LoginResponse {
  sessionId: SessionID
  error: LoginError
}
extend type Mutation {
  """
  Login with a username and password. Upon success, returns a session ID.

  *Rate limited.*
  """
  login(username: String!, password: String!): LoginResponse!
    @rateLimitBurst(window: "1s", max: 5)
    @rateLimitSustained(window: "1d", max: 5000)
}

enum RegisterError {
  "The provided email is incorrectly formatted. It should be a valid email address."
  INVALID_EMAIL
  EMAIL_ALREADY_USED
  UNSAFE_PASSWORD
}
type RegisterResponse {
  account: Account
  error: RegisterError
}
extend type Mutation {
  """
  Create a new account. Password may be omitted to require the user to set it during activation.

  *Rate limited.*
  """
  register(email: String!, password: String): RegisterResponse!
    @rateLimitBurst(window: "1s", max: 1)
    @rateLimitSustained(window: "1d", max: 1000)
}

enum ChangePasswordError {
  UNSAFE_PASSWORD
  UNAVAILABLE
  INVALID_PASSWORD
}
type ChangePasswordResponse {
  newSessionId: SessionID
  error: ChangePasswordError
}
extend type Mutation {
  """
  Change the password for the user's account. Upon success, all existing
  sessions will be invalidated and a new session ID will be returned that can
  be used to replace the user's now invalidated session.

  *Rate limited.*
  """
  changePassword(
    currentPassword: String!
    newPassword: String!
  ): ChangePasswordResponse!
    @rateLimitBurst(window: "1s", max: 2)
    @rateLimitSustained(window: "1d", max: 1000)
}

enum RestorePassswordError {
  INVALID_USERNAME
}
type RestorePassswordResponse {
  error: RestorePassswordError
}
extend type Mutation {
  """
  Start password restoration. Upon success, This will send an email with a
  link that can be used to set a new password.

  *Rate limited.*
  """
  restorePassword(username: String!): RestorePassswordResponse!
    @rateLimitBurst(window: "1s", max: 2)
    @rateLimitSustained(window: "1d", max: 1000)
}
